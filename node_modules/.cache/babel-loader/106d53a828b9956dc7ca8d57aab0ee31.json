{"ast":null,"code":"var _jsxFileName = \"/Users/jayaramnair/Desktop/Lambda School/repos/Build-Week/frontend/recipes/src/Components/dashboard.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport MiniCard from './minirecipecard.js';\nimport { Container } from 'reactstrap';\nimport { useHistory } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport Search from \"../Components/search.js\";\nimport { fetchRecipes } from '../actions/index.js';\nimport jwt_decode from 'jwt-decode';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Dashboard = props => {\n  _s();\n\n  const {\n    fetchRecipes,\n    recipes,\n    loading\n  } = props;\n  let decoded = \"\";\n  let token = localStorage.getItem('authToken');\n\n  if (token) {\n    decoded = jwt_decode(token);\n    console.log(decoded);\n  }\n\n  let url = `/api/users/${decoded.userID}/recipes`;\n  const history = useHistory();\n\n  const logout = evt => {\n    evt.preventDefault();\n    localStorage.removeItem('authToken');\n    history.push('/');\n  };\n\n  const navigateFunction = evt => {\n    history.push('/form');\n  };\n\n  useEffect(() => {\n    fetchRecipes(decoded.userID);\n  }, [fetchRecipes, decoded.userID]);\n\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Fetching Recipes....\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 16\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dashboard\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"navigation\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"navButton\",\n        onClick: navigateFunction,\n        children: \"Enter New Recipe\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Search, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"navButton\",\n        onClick: logout,\n        children: \"Logout\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Container, {\n      className: \"card-container\",\n      fluid: true,\n      children: recipes && recipes.map((recipe, index) => {\n        return /*#__PURE__*/_jsxDEV(MiniCard, {\n          cardId: index,\n          recipe: recipe\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 28\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Dashboard, \"bz2N+u0mX89LO9zOCfVCA9Sa20M=\", false, function () {\n  return [useHistory];\n});\n\n_c = Dashboard;\n\nconst mapStateToProps = state => {\n  return {\n    loading: state.loading,\n    recipes: state.recipes,\n    error: state.error\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    fetchRecipes: () => dispatch(fetchRecipes())\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Dashboard);\n\nvar _c;\n\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"sources":["/Users/jayaramnair/Desktop/Lambda School/repos/Build-Week/frontend/recipes/src/Components/dashboard.js"],"names":["React","useEffect","MiniCard","Container","useHistory","connect","Search","fetchRecipes","jwt_decode","Dashboard","props","recipes","loading","decoded","token","localStorage","getItem","console","log","url","userID","history","logout","evt","preventDefault","removeItem","push","navigateFunction","map","recipe","index","mapStateToProps","state","error","mapDispatchToProps","dispatch"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,QAAP,MAAqB,qBAArB;AACA,SAASC,SAAT,QAA0B,YAA1B;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,MAAP,MAAmB,yBAAnB;AACA,SAASC,YAAT,QAA6B,qBAA7B;AACA,OAAOC,UAAP,MAAuB,YAAvB;;;AAEA,MAAMC,SAAS,GAAIC,KAAD,IAAW;AAAA;;AAEzB,QAAM;AAAEH,IAAAA,YAAF;AAAgBI,IAAAA,OAAhB;AAAyBC,IAAAA;AAAzB,MAAqCF,KAA3C;AAEA,MAAIG,OAAO,GAAG,EAAd;AACA,MAAIC,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,WAArB,CAAZ;;AACA,MAAIF,KAAJ,EAAW;AACPD,IAAAA,OAAO,GAAGL,UAAU,CAACM,KAAD,CAApB;AACAG,IAAAA,OAAO,CAACC,GAAR,CAAYL,OAAZ;AACH;;AAED,MAAIM,GAAG,GAAI,cAAaN,OAAO,CAACO,MAAO,UAAvC;AAEA,QAAMC,OAAO,GAAGjB,UAAU,EAA1B;;AAEA,QAAMkB,MAAM,GAAIC,GAAD,IAAS;AACpBA,IAAAA,GAAG,CAACC,cAAJ;AACAT,IAAAA,YAAY,CAACU,UAAb,CAAwB,WAAxB;AACAJ,IAAAA,OAAO,CAACK,IAAR,CAAa,GAAb;AACH,GAJD;;AAMA,QAAMC,gBAAgB,GAAIJ,GAAD,IAAS;AAC9BF,IAAAA,OAAO,CAACK,IAAR,CAAa,OAAb;AACH,GAFD;;AAIAzB,EAAAA,SAAS,CAAC,MAAM;AACZM,IAAAA,YAAY,CAACM,OAAO,CAACO,MAAT,CAAZ;AACH,GAFQ,EAEN,CAACb,YAAD,EAAeM,OAAO,CAACO,MAAvB,CAFM,CAAT;;AAIA,MAAIR,OAAJ,EAAa;AACT,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACH;;AAED,sBACI;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA,4BACI;AAAK,MAAA,SAAS,EAAC,YAAf;AAAA,8BACI;AAAQ,QAAA,SAAS,EAAC,WAAlB;AAA8B,QAAA,OAAO,EAAEe,gBAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,cAFJ,eAGI;AAAQ,QAAA,SAAS,EAAC,WAAlB;AAA8B,QAAA,OAAO,EAAEL,MAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAMI,QAAC,SAAD;AAAW,MAAA,SAAS,EAAC,gBAArB;AAAsC,MAAA,KAAK,EAAE,IAA7C;AAAA,gBACKX,OAAO,IAAIA,OAAO,CAACiB,GAAR,CAAY,CAACC,MAAD,EAASC,KAAT,KAAmB;AACvC,4BAAO,QAAC,QAAD;AAAsB,UAAA,MAAM,EAAEA,KAA9B;AAAqC,UAAA,MAAM,EAAED;AAA7C,WAAeC,KAAf;AAAA;AAAA;AAAA;AAAA,gBAAP;AACH,OAFW;AADhB;AAAA;AAAA;AAAA;AAAA,YANJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAcH,CA/CD;;GAAMrB,S;UAacL,U;;;KAbdK,S;;AAiDN,MAAMsB,eAAe,GAAIC,KAAD,IAAW;AAC/B,SAAO;AACHpB,IAAAA,OAAO,EAAEoB,KAAK,CAACpB,OADZ;AAEHD,IAAAA,OAAO,EAAEqB,KAAK,CAACrB,OAFZ;AAGHsB,IAAAA,KAAK,EAAED,KAAK,CAACC;AAHV,GAAP;AAKH,CAND;;AAQA,MAAMC,kBAAkB,GAAIC,QAAD,IAAc;AACrC,SAAO;AACH5B,IAAAA,YAAY,EAAE,MAAM4B,QAAQ,CAAC5B,YAAY,EAAb;AADzB,GAAP;AAGH,CAJD;;AAMA,eAAeF,OAAO,CAAC0B,eAAD,EAAkBG,kBAAlB,CAAP,CAA6CzB,SAA7C,CAAf","sourcesContent":["import React, { useEffect } from 'react';\nimport MiniCard from './minirecipecard.js';\nimport { Container } from 'reactstrap';\nimport { useHistory } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport Search from \"../Components/search.js\";\nimport { fetchRecipes } from '../actions/index.js';\nimport jwt_decode from 'jwt-decode';\n\nconst Dashboard = (props) => {\n\n    const { fetchRecipes, recipes, loading } = props;\n\n    let decoded = \"\"\n    let token = localStorage.getItem('authToken');\n    if (token) {\n        decoded = jwt_decode(token);\n        console.log(decoded);\n    }\n\n    let url = `/api/users/${decoded.userID}/recipes`\n\n    const history = useHistory();\n\n    const logout = (evt) => {\n        evt.preventDefault();\n        localStorage.removeItem('authToken');\n        history.push('/')\n    }\n\n    const navigateFunction = (evt) => {\n        history.push('/form');\n    }\n\n    useEffect(() => {\n        fetchRecipes(decoded.userID);\n    }, [fetchRecipes, decoded.userID])\n\n    if (loading) {\n        return <div>Fetching Recipes....</div>\n    }\n\n    return (\n        <div className=\"dashboard\">\n            <div className=\"navigation\">\n                <button className=\"navButton\" onClick={navigateFunction}>Enter New Recipe</button>\n                <Search />\n                <button className=\"navButton\" onClick={logout}>Logout</button>\n            </div>\n            <Container className=\"card-container\" fluid={true}>\n                {recipes && recipes.map((recipe, index) => {\n                    return <MiniCard key={index} cardId={index} recipe={recipe} />\n                })}\n            </Container>\n        </div>\n    )\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        loading: state.loading,\n        recipes: state.recipes,\n        error: state.error,\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        fetchRecipes: () => dispatch(fetchRecipes())\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Dashboard);"]},"metadata":{},"sourceType":"module"}