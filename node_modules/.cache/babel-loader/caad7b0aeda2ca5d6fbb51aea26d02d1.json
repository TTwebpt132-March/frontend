{"ast":null,"code":"var _jsxFileName = \"/Users/jayaramnair/Desktop/Lambda School/repos/Build-Week/frontend/recipes/src/Components/recipeform.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { Container } from 'reactstrap';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst RecipeForm = props => {\n  _s();\n\n  const blankIngredient = {\n    name: ''\n  };\n  const blankInstruction = {\n    step: ''\n  };\n  const [form, setForm] = useState({\n    title: '',\n    source: '',\n    category: '',\n    ingredients: [blankIngredient],\n    instructions: [blankInstruction]\n  });\n\n  const addIngredients = () => {\n    setForm({ ...form,\n      ingredients: [...form.ingredients, { ...blankIngredient\n      }]\n    });\n  };\n\n  const addInstructions = () => {\n    setForm({ ...form,\n      instructions: [...form.instructions, { ...blankInstruction\n      }]\n    });\n  };\n\n  const nonDynamicChange = evt => {\n    console.log(evt.target.name, evt.target.value);\n    setForm({ ...form,\n      [evt.target.name]: evt.target.value\n    });\n  };\n\n  const instructionChange = evt => {\n    console.log(evt.target.name, evt.target.value);\n    const updatedInstructions = [...form.instructions];\n    updatedInstructions[evt.target.dataset.idx][evt.target.className] = evt.target.value;\n    setForm({ ...form,\n      instructions: updatedInstructions\n    });\n  };\n\n  const ingredientChange = evt => {\n    console.log(evt.target.name, evt.target.value);\n    const updatedIngredients = [...form.ingredients];\n    updatedIngredients[evt.target.dataset.idx][evt.target.className] = evt.target.value;\n    setForm({ ...form,\n      ingredients: updatedIngredients\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(Container, {\n      className: \"themed-container form-container\",\n      fluid: true,\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        className: \"recipeForm\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          for: \"recipeTitle\",\n          children: \" Title: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"recipeTitle\",\n          name: \"title\",\n          placeholder: \"Recipe Title\",\n          onChange: nonDynamicChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          for: \"recipeSource\",\n          children: \" Source: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"recipeSource\",\n          name: \"source\",\n          placeholder: \"Ex. Grandma, Mom\",\n          onChange: nonDynamicChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 21\n        }, this), form.ingredients.map((val, idx) => {\n          const ingredientId = `name-${idx}`;\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"ingredients\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              for: ingredientId,\n              children: `Ingredient #${idx + 1}: `\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 71,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              name: ingredientId,\n              \"data-idx\": idx,\n              id: ingredientId,\n              onChange: ingredientChange,\n              className: \"name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 72,\n              columnNumber: 37\n            }, this)]\n          }, `ingredient-${idx}`, true, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 33\n          }, this);\n        }), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"button\",\n          value: \"Add Ingredients\",\n          onClick: addIngredients\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 21\n        }, this), form.instructions.map((val, idx) => {\n          const instructionId = `name-${idx}`;\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"instructions\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              for: instructionId,\n              children: `Instruction #${idx + 1}: `\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 90,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              name: instructionId,\n              \"data-idx\": idx,\n              id: instructionId,\n              className: \"step\",\n              onChange: instructionChange\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 91,\n              columnNumber: 37\n            }, this)]\n          }, `instruction-${idx}`, true, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 33\n          }, this);\n        }), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"button\",\n          value: \"Add Instructions\",\n          onClick: addInstructions\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          for: \"recipeCategory\",\n          children: \" Category: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"recipeCategory\",\n          name: \"category\",\n          placeholder: \"dinner, pasta, pizza\",\n          onChange: nonDynamicChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 9\n  }, this);\n};\n\n_s(RecipeForm, \"/RfMfex67W+BZW+mG2Q+2lh17G4=\");\n\n_c = RecipeForm;\nexport default RecipeForm;\n/*\nRecipeForm should have a title, source (ex Grandma), ingredients, instructions, and category (dinner, chicken, dessert, pasta)\n*/\n\nvar _c;\n\n$RefreshReg$(_c, \"RecipeForm\");","map":{"version":3,"sources":["/Users/jayaramnair/Desktop/Lambda School/repos/Build-Week/frontend/recipes/src/Components/recipeform.js"],"names":["React","useState","Container","RecipeForm","props","blankIngredient","name","blankInstruction","step","form","setForm","title","source","category","ingredients","instructions","addIngredients","addInstructions","nonDynamicChange","evt","console","log","target","value","instructionChange","updatedInstructions","dataset","idx","className","ingredientChange","updatedIngredients","map","val","ingredientId","instructionId"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,SAAT,QAA0B,YAA1B;;;AAEA,MAAMC,UAAU,GAAIC,KAAD,IAAW;AAAA;;AAC1B,QAAMC,eAAe,GAAG;AACpBC,IAAAA,IAAI,EAAE;AADc,GAAxB;AAIA,QAAMC,gBAAgB,GAAG;AACrBC,IAAAA,IAAI,EAAE;AADe,GAAzB;AAIA,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBT,QAAQ,CAAC;AAC7BU,IAAAA,KAAK,EAAE,EADsB;AAE7BC,IAAAA,MAAM,EAAE,EAFqB;AAG7BC,IAAAA,QAAQ,EAAE,EAHmB;AAI7BC,IAAAA,WAAW,EAAE,CAACT,eAAD,CAJgB;AAK7BU,IAAAA,YAAY,EAAE,CAACR,gBAAD;AALe,GAAD,CAAhC;;AAQA,QAAMS,cAAc,GAAG,MAAM;AACzBN,IAAAA,OAAO,CAAC,EAAE,GAAGD,IAAL;AAAWK,MAAAA,WAAW,EAAE,CAAC,GAAGL,IAAI,CAACK,WAAT,EAAsB,EAAE,GAAGT;AAAL,OAAtB;AAAxB,KAAD,CAAP;AACH,GAFD;;AAIA,QAAMY,eAAe,GAAG,MAAM;AAC1BP,IAAAA,OAAO,CAAC,EAAE,GAAGD,IAAL;AAAWM,MAAAA,YAAY,EAAE,CAAC,GAAGN,IAAI,CAACM,YAAT,EAAuB,EAAE,GAAGR;AAAL,OAAvB;AAAzB,KAAD,CAAP;AACH,GAFD;;AAIA,QAAMW,gBAAgB,GAAIC,GAAD,IAAS;AAC9BC,IAAAA,OAAO,CAACC,GAAR,CAAYF,GAAG,CAACG,MAAJ,CAAWhB,IAAvB,EAA6Ba,GAAG,CAACG,MAAJ,CAAWC,KAAxC;AACAb,IAAAA,OAAO,CAAC,EAAE,GAAGD,IAAL;AAAW,OAACU,GAAG,CAACG,MAAJ,CAAWhB,IAAZ,GAAmBa,GAAG,CAACG,MAAJ,CAAWC;AAAzC,KAAD,CAAP;AACH,GAHD;;AAKA,QAAMC,iBAAiB,GAAIL,GAAD,IAAS;AAC/BC,IAAAA,OAAO,CAACC,GAAR,CAAYF,GAAG,CAACG,MAAJ,CAAWhB,IAAvB,EAA6Ba,GAAG,CAACG,MAAJ,CAAWC,KAAxC;AACA,UAAME,mBAAmB,GAAG,CAAC,GAAGhB,IAAI,CAACM,YAAT,CAA5B;AACAU,IAAAA,mBAAmB,CAACN,GAAG,CAACG,MAAJ,CAAWI,OAAX,CAAmBC,GAApB,CAAnB,CAA4CR,GAAG,CAACG,MAAJ,CAAWM,SAAvD,IAAoET,GAAG,CAACG,MAAJ,CAAWC,KAA/E;AACAb,IAAAA,OAAO,CAAC,EAAE,GAAGD,IAAL;AAAWM,MAAAA,YAAY,EAAEU;AAAzB,KAAD,CAAP;AACH,GALD;;AAOA,QAAMI,gBAAgB,GAAIV,GAAD,IAAS;AAC9BC,IAAAA,OAAO,CAACC,GAAR,CAAYF,GAAG,CAACG,MAAJ,CAAWhB,IAAvB,EAA6Ba,GAAG,CAACG,MAAJ,CAAWC,KAAxC;AACA,UAAMO,kBAAkB,GAAG,CAAC,GAAGrB,IAAI,CAACK,WAAT,CAA3B;AACAgB,IAAAA,kBAAkB,CAACX,GAAG,CAACG,MAAJ,CAAWI,OAAX,CAAmBC,GAApB,CAAlB,CAA2CR,GAAG,CAACG,MAAJ,CAAWM,SAAtD,IAAmET,GAAG,CAACG,MAAJ,CAAWC,KAA9E;AACAb,IAAAA,OAAO,CAAC,EAAE,GAAGD,IAAL;AAAWK,MAAAA,WAAW,EAAEgB;AAAxB,KAAD,CAAP;AACH,GALD;;AAOA,sBACI;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,2BACI,QAAC,SAAD;AAAW,MAAA,SAAS,EAAC,iCAArB;AAAuD,MAAA,KAAK,EAAE,IAA9D;AAAA,6BACI;AAAM,QAAA,SAAS,EAAC,YAAhB;AAAA,gCACI;AAAO,UAAA,GAAG,EAAC,aAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI;AACI,UAAA,EAAE,EAAC,aADP;AAEI,UAAA,IAAI,EAAC,OAFT;AAGI,UAAA,WAAW,EAAC,cAHhB;AAII,UAAA,QAAQ,EAAEZ;AAJd;AAAA;AAAA;AAAA;AAAA,gBAFJ,eAQI;AAAO,UAAA,GAAG,EAAC,cAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBARJ,eASI;AACI,UAAA,EAAE,EAAC,cADP;AAEI,UAAA,IAAI,EAAC,QAFT;AAGI,UAAA,WAAW,EAAC,kBAHhB;AAII,UAAA,QAAQ,EAAEA;AAJd;AAAA;AAAA;AAAA;AAAA,gBATJ,EAgBQT,IAAI,CAACK,WAAL,CAAiBiB,GAAjB,CAAqB,CAACC,GAAD,EAAML,GAAN,KAAc;AAC/B,gBAAMM,YAAY,GAAI,QAAON,GAAI,EAAjC;AACA,8BACI;AAA+B,YAAA,SAAS,EAAC,aAAzC;AAAA,oCACI;AAAO,cAAA,GAAG,EAAEM,YAAZ;AAAA,wBAA4B,eAAcN,GAAG,GAAG,CAAE;AAAlD;AAAA;AAAA;AAAA;AAAA,oBADJ,eAEI;AACI,cAAA,IAAI,EAAC,MADT;AAEI,cAAA,IAAI,EAAEM,YAFV;AAGI,0BAAUN,GAHd;AAII,cAAA,EAAE,EAAEM,YAJR;AAKI,cAAA,QAAQ,EAAEJ,gBALd;AAMI,cAAA,SAAS,EAAC;AANd;AAAA;AAAA;AAAA;AAAA,oBAFJ;AAAA,aAAW,cAAaF,GAAI,EAA5B;AAAA;AAAA;AAAA;AAAA,kBADJ;AAaH,SAfD,CAhBR,eAiCI;AAAO,UAAA,IAAI,EAAC,QAAZ;AAAqB,UAAA,KAAK,EAAC,iBAA3B;AAA6C,UAAA,OAAO,EAAEX;AAAtD;AAAA;AAAA;AAAA;AAAA,gBAjCJ,EAmCQP,IAAI,CAACM,YAAL,CAAkBgB,GAAlB,CAAsB,CAACC,GAAD,EAAML,GAAN,KAAc;AAChC,gBAAMO,aAAa,GAAI,QAAOP,GAAI,EAAlC;AACA,8BACI;AAAgC,YAAA,SAAS,EAAC,cAA1C;AAAA,oCACI;AAAO,cAAA,GAAG,EAAEO,aAAZ;AAAA,wBAA6B,gBAAeP,GAAG,GAAG,CAAE;AAApD;AAAA;AAAA;AAAA;AAAA,oBADJ,eAEI;AACI,cAAA,IAAI,EAAC,MADT;AAEI,cAAA,IAAI,EAAEO,aAFV;AAGI,0BAAUP,GAHd;AAII,cAAA,EAAE,EAAEO,aAJR;AAKI,cAAA,SAAS,EAAC,MALd;AAMI,cAAA,QAAQ,EAAEV;AANd;AAAA;AAAA;AAAA;AAAA,oBAFJ;AAAA,aAAW,eAAcG,GAAI,EAA7B;AAAA;AAAA;AAAA;AAAA,kBADJ;AAaH,SAfD,CAnCR,eAoDI;AAAO,UAAA,IAAI,EAAC,QAAZ;AAAqB,UAAA,KAAK,EAAC,kBAA3B;AAA8C,UAAA,OAAO,EAAEV;AAAvD;AAAA;AAAA;AAAA;AAAA,gBApDJ,eAqDI;AAAO,UAAA,GAAG,EAAC,gBAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBArDJ,eAsDI;AACI,UAAA,EAAE,EAAC,gBADP;AAEI,UAAA,IAAI,EAAC,UAFT;AAGI,UAAA,WAAW,EAAC,sBAHhB;AAII,UAAA,QAAQ,EAAEC;AAJd;AAAA;AAAA;AAAA;AAAA,gBAtDJ,eA6DI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBA7DJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAqEH,CAjHD;;GAAMf,U;;KAAAA,U;AAmHN,eAAeA,UAAf;AAEA;AACA;AACA","sourcesContent":["import React, { useState } from 'react';\nimport { Container } from 'reactstrap';\n\nconst RecipeForm = (props) => {\n    const blankIngredient = {\n        name: '',\n    }\n\n    const blankInstruction = {\n        step: '',\n    }\n\n    const [form, setForm] = useState({\n        title: '',\n        source: '',\n        category: '',\n        ingredients: [blankIngredient],\n        instructions: [blankInstruction],\n    })\n\n    const addIngredients = () => {\n        setForm({ ...form, ingredients: [...form.ingredients, { ...blankIngredient }] })\n    }\n\n    const addInstructions = () => {\n        setForm({ ...form, instructions: [...form.instructions, { ...blankInstruction }] })\n    }\n\n    const nonDynamicChange = (evt) => {\n        console.log(evt.target.name, evt.target.value)\n        setForm({ ...form, [evt.target.name]: evt.target.value })\n    }\n\n    const instructionChange = (evt) => {\n        console.log(evt.target.name, evt.target.value)\n        const updatedInstructions = [...form.instructions];\n        updatedInstructions[evt.target.dataset.idx][evt.target.className] = evt.target.value;\n        setForm({ ...form, instructions: updatedInstructions });\n    }\n\n    const ingredientChange = (evt) => {\n        console.log(evt.target.name, evt.target.value)\n        const updatedIngredients = [...form.ingredients];\n        updatedIngredients[evt.target.dataset.idx][evt.target.className] = evt.target.value;\n        setForm({ ...form, ingredients: updatedIngredients });\n    }\n\n    return (\n        <div className=\"App\">\n            <Container className=\"themed-container form-container\" fluid={true}>\n                <form className=\"recipeForm\">\n                    <label for=\"recipeTitle\"> Title: </label>\n                    <input\n                        id=\"recipeTitle\"\n                        name=\"title\"\n                        placeholder=\"Recipe Title\"\n                        onChange={nonDynamicChange}\n                    />\n                    <label for=\"recipeSource\"> Source: </label>\n                    <input\n                        id=\"recipeSource\"\n                        name=\"source\"\n                        placeholder=\"Ex. Grandma, Mom\"\n                        onChange={nonDynamicChange}\n                    />\n                    {\n                        form.ingredients.map((val, idx) => {\n                            const ingredientId = `name-${idx}`;\n                            return (\n                                <div key={`ingredient-${idx}`} className='ingredients'>\n                                    <label for={ingredientId}>{`Ingredient #${idx + 1}: `}</label>\n                                    <input\n                                        type=\"text\"\n                                        name={ingredientId}\n                                        data-idx={idx}\n                                        id={ingredientId}\n                                        onChange={ingredientChange}\n                                        className=\"name\"\n                                    />\n                                </div>\n                            )\n                        })\n                    }\n                    <input type=\"button\" value=\"Add Ingredients\" onClick={addIngredients} />\n                    {\n                        form.instructions.map((val, idx) => {\n                            const instructionId = `name-${idx}`;\n                            return (\n                                <div key={`instruction-${idx}`} className=\"instructions\">\n                                    <label for={instructionId}>{`Instruction #${idx + 1}: `}</label>\n                                    <input\n                                        type=\"text\"\n                                        name={instructionId}\n                                        data-idx={idx}\n                                        id={instructionId}\n                                        className=\"step\"\n                                        onChange={instructionChange}\n                                    />\n                                </div>\n                            )\n                        })\n                    }\n                    <input type=\"button\" value=\"Add Instructions\" onClick={addInstructions} />\n                    <label for=\"recipeCategory\"> Category: </label>\n                    <input\n                        id=\"recipeCategory\"\n                        name=\"category\"\n                        placeholder=\"dinner, pasta, pizza\"\n                        onChange={nonDynamicChange}\n                    />\n\n                    <button>Submit</button>\n                </form>\n            </Container>\n        </div>\n    );\n}\n\nexport default RecipeForm;\n\n/*\nRecipeForm should have a title, source (ex Grandma), ingredients, instructions, and category (dinner, chicken, dessert, pasta)\n*/"]},"metadata":{},"sourceType":"module"}